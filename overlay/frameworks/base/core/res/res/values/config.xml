<?xml version="1.0" encoding="utf-8"?>
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <!-- This string array should be overridden by the device to present a list of network attributes.  This is used by the connectivity manager to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[Connection name],[ConnectivityManager.TYPE_xxxx], [associated radio-type],[priority],[restoral-timer(ms)],[dependencyMet]  -->
    <!-- the 5th element "resore-time" indicates the number of milliseconds to delay before automatically restore the default connection.  Set -1 if the connection does not require auto-restore. -->
    <!-- the 6th element indicates boot-time dependency-met value. -->
    <string-array translatable="false" name="networkAttributes">
        <item>"wifi,1,1,1,-1,true"</item>
        <item>"mobile,0,0,0,-1,true"</item>
        <item>"mobile_mms,2,0,2,60000,true"</item>
        <item>"mobile_supl,3,0,2,60000,true"</item>
        <item>"mobile_dun,4,0,2,60000,true"</item>
        <item>"mobile_hipri,5,0,3,60000,true"</item>
        <item>"mobile_fota,10,0,2,60000,true"</item>
        <item>"mobile_ims,11,0,2,60000,true"</item>
        <item>"mobile_cbs,12,0,2,60000,true"</item>
        <item>"mobile_ia,14,0,2,-1,true"</item>
        <item>"bluetooth,7,7,2,-1,true"</item>
        <item>"ethernet,9,9,9,-1,true"</item>
        <item>"mobile_emergency,15,0,2,-1,true"</item>
    </string-array>
    <!-- This string array should be overridden by the device to present a list of radio attributes.  This is used by the connectivity manager to decide which networks can coexist based on the hardware -->
    <!-- An Array of "[ConnectivityManager connectionType], [# simultaneous connection types]"  -->
    <string-array translatable="false" name="radioAttributes">
        <item>"1,1"</item>
        <item>"0,1"</item>
        <item>"7,1"</item>
        <item>"9,1"</item>
    </string-array>
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings. Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>
    <!-- Flag indicating whether we should enable the adaptive sleep.-->
    <bool name="config_adaptive_sleep_available">true</bool>
    <!-- Flag indicating whether we should enable smart battery. -->
    <bool name="config_smart_battery_available">true</bool>
    <!-- If this is true, the screen will come on when you unplug usb/power/whatever. -->
    <bool name="config_unplugTurnsOnScreen">true</bool>
    <!-- If true, the screen can be rotated via the accelerometer in all 4 rotations as the default behavior. -->
    <bool name="config_allowAllRotations">true</bool>
    <!-- Indicate whether closing the lid causes the device to go to sleep and opening it causes the device to wake up. The default is false. -->
    <bool name="config_lidControlsSleep">true</bool>
    <!-- Boolean indicating whether the HWC setColorTransform function can be performed efficiently in hardware. -->
    <bool name="config_setColorTransformAccelerated">true</bool>
    <!-- Vibrator pattern for feedback about a long screen/key press -->
    <integer-array name="config_longPressVibePattern">
        <item>0</item>
        <item>28</item>
        <item>10</item>
    </integer-array>
    <!-- Vibrator pattern for feedback about touching a virtual key -->
    <integer-array name="config_virtualKeyVibePattern">
        <item>0</item>
        <item>28</item>
        <item>8</item>
    </integer-array>
    <!-- Vibrator pattern for a very short but reliable vibration for soft keyboard tap -->
    <integer-array name="config_keyboardTapVibePattern">
        <item>28</item>
    </integer-array>
    <!-- Default value for led color when battery is low on charge -->
    <integer name="config_notificationsBatteryLowARGB">0xFFFFFFFF</integer>
    <!-- Default value for led color when battery is medium charged -->
    <integer name="config_notificationsBatteryMediumARGB">0xFFFFFFFF</integer>
    <!-- Default value for led color when battery is fully charged -->
    <integer name="config_notificationsBatteryFullARGB">0xFFFFFFFF</integer>
    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>
    <!-- Is the device capable of hot swapping an ICC Card -->
    <bool name="config_hotswapCapable">true</bool>
    <!-- Minimum screen brightness setting allowed by the power manager. The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">1</integer>
    <!-- Screen brightness used to dim the screen while dozing in a very low power state. May be less than the minimum allowed brightness setting that can be set by the user. -->
    <integer name="config_screenBrightnessDoze">17</integer>
    <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used for debouncing the light sensor.  Different constants are used to debounce the light sensor when adapting to brighter or darker environments.  This parameter controls how quickly brightness changes occur in response to an observed change in light level that exceeds the hysteresis threshold. -->
    <integer name="config_autoBrightnessBrighteningLightDebounce">2000</integer>
    <integer name="config_autoBrightnessDarkeningLightDebounce">6000</integer>
    <!-- The maximum range of gamma adjustment possible using the screen auto-brightness adjustment setting. -->
    <fraction name="config_autoBrightnessAdjustmentMaxGamma">200%</fraction>
    <!-- Screen brightness used to dim the screen when the user activity timeout expires.  May be less than the minimum allowed brightness setting that can be set by the user. -->
    <integer name="config_screenBrightnessDim">1</integer>
    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support. The N entries of this array define N  1 zones as follows: Zone 0:        0 <= LUX < array[0] Zone 1:        array[0] <= LUX < array[1] ... Zone N:        array[N - 1] <= LUX < array[N] Zone N + 1     array[N] <= LUX < infinity Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>1</item>
        <item>4</item>
        <item>5</item>
        <item>8</item>
        <item>13</item>
        <item>17</item>
        <item>21</item>
        <item>26</item>
        <item>30</item>
        <item>34</item>
        <item>140</item>
        <item>310</item>
        <item>400</item>
        <item>500</item>
        <item>600</item>
        <item>1000</item>
        <item>1200</item>
        <item>1500</item>
        <item>3000</item>
        <item>3500</item>
        <item>4000</item>
    </integer-array>
    <!-- Array of output values for LCD backlight corresponding to the LUX values in the config_autoBrightnessLevels array.  This array should have size one greater than the size of the config_autoBrightnessLevels array. This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>4</item>
        <item>4</item>
        <item>4</item>
        <item>8</item>
        <item>16</item>
        <item>21</item>
        <item>30</item>
        <item>30</item>
        <item>30</item>
        <item>30</item>
        <item>65</item>
        <item>65</item>
        <item>65</item>
        <item>65</item>
        <item>78</item>
        <item>78</item>
        <item>104</item>
        <item>115</item>
        <item>130</item>
        <item>200</item>
        <item>240</item>
        <item>255</item>
    </integer-array>
    <!-- Amount of time it takes for the light sensor to warm up in milliseconds. For this time after the screen turns on, the Power Manager will not debounce light sensor readings -->
    <integer name="config_lightSensorWarmupTime">200</integer>
    <!-- Boolean indicating if current platform supports BLE peripheral mode -->
    <bool name="config_bluetooth_le_peripheral_mode_supported">true</bool>
    <!-- Operating volatage for bluetooth controller. 0 by default-->
    <integer name="config_bluetooth_operating_voltage_mv">3300</integer>
    <!-- Boolean indicating if restoring network selection should be skipped -->
    <!-- The restoring is handled by modem if it is true-->
    <bool translatable="false" name="skip_restoring_network_selection">true</bool>
    <!-- SQLite -->
    <string name="db_default_journal_mode">MEMORY</string>
    <string name="db_default_sync_mode">OFF</string>
    <string name="db_wal_sync_mode">OFF</string>
    <!-- Whether a software navigation bar should be shown. NOTE: in the future this may be autodetected from the Configuration. -->
    <bool name="config_showNavigationBar">true</bool>
    <!-- ComponentName of a dream to show whenever the system would otherwise have gone to sleep.  When the PowerManager is asked to go to sleep, it will instead try to start this dream if possible.  The dream should typically call startDozing() to put the display into a low power state and allow the application processor to be suspended.  When the dream ends, the system will go to sleep as usual. Specify the component name or an empty string if none. Note that doze dreams are not subject to the same start conditions as ordinary dreams. Doze dreams will run whenever the power manager is in a dozing state. -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>
    <!-- If true, the doze component is not started until after the screen has been turned off and the screen off animation has been performed. -->
    <bool name="config_dozeAfterScreenOffByDefault">true</bool>
    <!-- Power Management: Specifies whether to decouple the interactive state of the device from the display on/off state. When false, setInteractive(..., true) will be called before the display is turned on and setInteractive(..., false) will be called after the display is turned off. This mode provides best compatibility for devices that expect the interactive state to be tied to the display state. When true, setInteractive(...) will be called independently of whether the display is being turned on or off.  This mode enables the power manager to reduce clocks and disable the touch controller while the display is on. This resource should be set to "true" when a doze component has been specified to maximize power savings but not all devices support it. Refer to power.h for details. -->
    <bool name="config_powerDecoupleInteractiveModeFromDisplay">true</bool>
    <!-- Configure mobile tcp buffer sizes in the form: rat-name:rmem_min,rmem_def,rmem_max,wmem_min,wmem_def,wmem_max If no value is found for the rat-name in use, the system default will be applied. -->
    <string-array name="config_mobile_tcp_buffers">
        <item>umts:131072,262144,1452032,4096,16384,399360</item>
        <item>hspa:131072,262144,2441216,4096,16384,399360</item>
        <item>hsupa:131072,262144,2441216,4096,16384,399360</item>
        <item>hsdpa:131072,262144,2441216,4096,16384,399360</item>
        <item>hspap:131072,262144,2441216,4096,16384,399360</item>
        <item>edge:16384,32768,131072,4096,16384,65536</item>
        <item>gprs:4096,8192,24576,4096,8192,24576</item>
        <item>1xrtt:16384,32768,131070,4096,16384,102400</item>
        <item>evdo:131072,262144,1048576,4096,16384,524288</item>
        <item>lte:524288,1048576,8388608,262144,524288,4194304</item>
    </string-array>
    <!-- Whether WiFi display is supported by this device. There are many prerequisites for this feature to work correctly. -->
    <bool name="config_enableWifiDisplay">true</bool>
    <!-- When true use the linux /dev/input/event subsystem to detect the switch changes on the headphone/microphone jack. When false use the older uevent framework. -->
    <bool name="config_useDevInputEventForAudioJack">true</bool>
    <!-- Flag indicating if the speed up audio on mt call code should be executed -->
    <bool name="config_speed_up_audio_on_mt_calls">true</bool>
    <!-- Flag specifying whether VoLTE is available on device -->
    <bool name="config_device_volte_available">true</bool>
    <!-- Flag specifying whether VoLTE should be available for carrier: independent of carrier provisioning. If false: hard disabled. If true: then depends on carrier provisioning, availability etc -->
    <bool name="config_carrier_volte_available">true</bool>
    <!-- Flag specifying whether WFC over IMS is available on device -->
    <bool name="config_device_wfc_ims_available">true</bool>
    <!-- Flag specifying whether WFC over IMS should be available for carrier: independent of carrier provisioning. If false: hard disabled. If true: then depends on carrier provisioning, availability etc -->
    <bool name="config_carrier_wfc_ims_available">true</bool>
    <!-- Config determines whether to update phone object when voice registration state changes. Voice radio tech change will always trigger an update of phone object irrespective of this config -->
    <bool name="config_switch_phone_on_voice_reg_state_change">false</bool>
    <!-- Number of physical SIM slots on the device. This includes both eSIM and pSIM slots, and is not necessarily the same as the number of phones/logical modems supported by the device. For example, a multi-sim device can have 2 phones/logical modems, but 3 physical slots, or a single SIM device can have 1 phones/logical modems, but 2 physical slots (one eSIM and one pSIM) -->
    <integer name="config_num_physical_slots">2</integer>
    <!-- Whether device supports double tap to wake -->
    <bool name="config_supportDoubleTapWake">true</bool>
    <!-- Device supports Sustained Performance Mode-->
    <bool name="config_sustainedPerformanceModeSupported">true</bool>
    <!-- Default list of files pinned by the Pinner Service -->
    <string-array translatable="false" name="config_defaultPinnerServiceFiles">
        <item>"/apex/com.android.art/javalib/arm64/boot-core-libart.art"</item>
        <item>"/apex/com.android.art/javalib/arm64/boot-core-libart.oat"</item>
        <item>"/apex/com.android.art/javalib/arm64/boot-core-libart.vdex"</item>
        <item>"/apex/com.android.art/javalib/arm64/boot.art"</item>
        <item>"/apex/com.android.art/javalib/arm64/boot.oat"</item>
        <item>"/apex/com.android.art/javalib/arm64/boot.vdex"</item>
        <item>"/apex/com.android.art/javalib/core-libart.jar"</item>
        <item>"/apex/com.android.art/javalib/core-oj.jar"</item>
        <item>"/apex/com.android.media/javalib/updatable-media.jar"</item>
        <item>"/system_ext/priv-app/SystemUI/oat/arm64/SystemUI.odex"</item>
        <item>"/system_ext/priv-app/SystemUI/oat/arm64/SystemUI.vdex"</item>
        <item>"/system_ext/priv-app/SystemUI/SystemUI.apk"</item>
        <item>"/system/framework/arm64/boot-framework.art"</item>
        <item>"/system/framework/arm64/boot-framework.oat"</item>
        <item>"/system/framework/boot-framework.vdex"</item>
        <item>"/system/framework/framework.jar"</item>
        <item>"/system/framework/oat/arm64/services.art"</item>
        <item>"/system/framework/oat/arm64/services.odex"</item>
        <item>"/system/framework/oat/arm64/services.vdex"</item>
        <item>"/system/framework/services.jar.prof"</item>
        <item>"/system/framework/services.jar"</item>
        <item>"/system/lib64/libsurfaceflinger.so"</item>
    </string-array>
    <!-- Should the pinner service pin the Home application? -->
    <bool name="config_pinnerHomeApp">true</bool>
    <!-- List of files pinned by the Pinner Service with the JIT Zygote boot image b/119800099 -->
    <string-array translatable="false" name="config_jitzygoteBootImagePinnerServiceFiles">
        <item>"/apex/com.android.art/javalib/core-libart.jar"</item>
        <item>"/apex/com.android.art/javalib/core-oj.jar"</item>
        <item>"/apex/com.android.media/javalib/updatable-media.jar"</item>
        <item>"/system_ext/priv-app/SystemUI/SystemUI.apk"</item>
        <item>"/system/framework/framework.jar"</item>
        <item>"/system/framework/services.jar.prof"</item>
        <item>"/system/framework/services.jar"</item>
        <item>"/system/lib64/libsurfaceflinger.so"</item>
    </string-array>
    <!-- List of biometric sensors on the device, in decreasing strength. Consumed by AuthService when registering authenticators with BiometricService. Format must be ID:Modality:Strength, where: IDs are unique per device, Modality as defined in BiometricAuthenticator.java, and Strength as defined in Authenticators.java -->
    <string-array name="config_biometric_sensors" translatable="false">
        <item>0:2:15</item>
    </string-array>
</resources>
